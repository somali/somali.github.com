---
layout: default
title: Rails Girls アプリ・チュートリアル
permalink: app
---

# Rails Girls アプリ・チュートリアル

*Created by Vesa Vänskä, [@vesan](https://twitter.com/vesan)*

[**まず、Railsがインストールされていることを確認してください。もしくはこちらのリンクを見てください。**](/install)


## Step 0: ツールを知る

* テキストエディタ (Gedit, Vim, Emacs, Komodo Edit, Sublime Text) は、テキストエディタの例です。コードを書いたりファイルを編集したりすることができます。
* ターミナル/コマンドプロンプトは、rails serverを起動したりコマンドを実行したりするものです。
* ウェブブラウザ (Firefox, Safari, Chrome) アプリケーションを表示するためのものです。


## Step 1: アプリケーションを作る

*railsgirls* という名前のアプリを作りましょう。

まず、ターミナルまたはコマンドプロンプトを開いてください。

* OS X: Spotlightで *Terminal* と入力して出てきたターミナルをクリックしてください。
* Windows: スタートメニューをクリックして *Command Prompt* を探し、 *Command Prompt with Ruby on Rails*をクリックしてください。(みつからない場合は、「プログラムとファイルの検索」へ *Command Prompt with Ruby on Rails* を入力し検索してください。)

そして、次のコマンドを入力します。 :

```
mkdir projects
cd projects
rails new railsgirls
cd railsgirls
rails s
``` 

ブラウザで [http://localhost:3000](http://localhost:3000) にアクセスしてください。

CTRL-C でターミナル/コマンドプロンプト上のサーバを終了します。(WindowsでCTRL-Cで終了しない場合は、CTRL-PAUSEを試してください。)

**Coachより:** それぞれのコマンドが何なのか説明してみましょう。何が生成されましたか？そしてサーバーは何をしますか？


## Step 2: Idea の scaffold をする

Rails の scaffold 機能を使って、最初の一歩となる list, add, remove, edit, view を生成します。
ここでは ideas という名前で作ります。

**Coachより:** scaffold とはなんでしょう (1. ただのコマンド, 2. モデル名でDBテーブルと関係があるもの;命名規約 , 3. 属性や型)？ また、migration 機能が何で、いつ必要なものですか？それはいつですか？なぜ？

``` sh
rails generate scaffold idea name:string description:text picture:string
rake db:migrate
rails s
```

ブラウザで [http://localhost:3000/ideas](http://localhost:3000/ideas) にアクセスしてください。

いろいろクリックしてみたりしたら、 CTRL-C でサーバを終了します。(WindowsでCTRL-Cで終了しない場合は、CTRL-PAUSEを試してください。)

## Step 3: デザインする

**Coachより:** HTML と Railsの関係について話してみましょう。views のどの部分が HTML で、どこが Embedded Ruby (ERB)ですか？どうやってこれらが MVC (モデルとコントローラが、動的に HTML や views を生成するロジックを管理しているもの) と関連づけられていますか？

そのままのデザインはイケてないので、何かやってみましょう。Twitter&#8217;s Bootstrap は、ホント簡単に、いい感じのスタイルを提供してくれますよ。

app/views/layouts/application.html.erb を開くと、次の行があります。

``` erb
<%= stylesheet_link_tag "application" %>
```

この1行前に次のタグを追記してください。

``` erb
<link rel="stylesheet" href="http://railsgirls.com/assets/bootstrap.css">
```

そして、この部分、

``` erb
<%= yield %>
```

これを次のように置き換えてください。

``` erb
<div class="container">
    <%= yield %>
</div>
```

そして、トップバーとフッターをレイアウトに追加して、ideasの表も変えてしまいましょう。

application.html.erb 内の `<body>` の下に追加するものです。 :

``` html
<div class="navbar navbar-fixed-top">
    <div class="navbar-inner">
        <div class="container">
            <a class="brand" href="/">The Idea app</a>
            <ul class="nav">
                <li class="active"><a href="/ideas">Ideas</a></li>
            </ul>
        </div>
    </div>
</div>
```

`</body>` の前に追加するものです。 :

``` html
<footer>
    <div class="container">
        Rails Girls 2012
    </div>
</footer>
```

app/assets/stylesheets/application.css を開いて、コードの一番下に次のcssを追加しましょう。 :

``` css
#logo { 
    font-size: 20px;
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    float: left;
    padding: 10px;
}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle !important; border: none !important; }
th { border-bottom: 1px solid #DDD !important; }
td.picture { width: 140px; }
td.picture img { width: 140px; }
```

**Coachより:** CSSとレイアウトについてちょっと話してみましょう。


## Step 4: 写真アップロード機能を追加する

画像処理をするのに、追加でライブラリをインストールする必要があります。

プロジェクト内の Gemfile を開いて、次のgemを追加します。

``` ruby
gem 'carrierwave'
```

この 'sqlite3' の次あたりに書くといいです。

``` ruby
gem 'sqlite3'
```

**Coachより:** 何のライブラリがあって、どう使われているものかわかりますか？いくつかはオープンソースの名前ですよね？

さて、写真を処理するコードを生成します。Terminal/Command Prompt で、次のコマンドを実行してください。 :

``` sh
bundle
```

**ここで、Terminal/Command Prompt 上の rails server プロセスをリスタートする必要があります。** 追加した gem をアプリにロードさせるためです。

そうすると、次のコマンドで写真をアップロードする準備ができます。 :

``` sh
rails generate uploader Picture
```

app/models/idea.rb を開いて、次のコードを追記してください。

``` ruby
mount_uploader :picture, PictureUploader
```

この class... の下に書いてくださいね。

``` ruby
class Idea < ActiveRecord::Base
```

そして、app/views/ideas/_form.html.erb を開いて２か所編集します。

``` erb
<%= f.text_field :picture %>
```

&nbsp;&nbsp;&#8595;

``` erb
<%= f.file_field :picture %>
```

それと、

``` erb
<%= form_for(@idea) do |f| %>
```

&nbsp;&nbsp;&#8595;

``` erb
<%= form_for(@idea, :html => {:multipart => true}) do |f| %>
```


それと、このviewはよくないですね。ファイルのpathだけを表示してるので、これもいじってみましょう。

app/views/ideas/show.html.erb を開いて編集します。

``` erb
<%= @idea.picture %>
```

&nbsp;&nbsp;&#8595;

``` erb
<%= image_tag(@idea.picture_url, :width => 600) if @idea.picture.present? %>
```


**Coachより:** HTML についてちょっと話してみましょう。


## Step 5: routes を調整する

[http://localhost:3000](http://localhost:3000) を開いても、まだデフォルトページが見えると思います。ideas ページにリダイレクトするようにしましょう。

OS X と Linux は、ターミナルで次のコマンドを実行します。 :

``` sh
rm public/index.html
```

Windows は、コマンドプロンプトで次のように実行してください。 :

``` bat
del public\index.html
```

そして、 config/routes.rb を開いて、次のコードをファイルの1行目のあとに追記してください。 :

``` ruby
root :to => redirect("/ideas")
```

**Coachより:** routes について話してみましょう。


## 次は？

* HTML や CSS を使ってデザインを追加しましょう。 
* 写真の評価機能を追加しましょう。
* CoffeeScript (or JavaScript) を使って動きをつけてみましょう。 
* 写真のロードを早くするために、適切な写真のリサイズ機能を追加しましょう。
      

## その他の手引き

* GUIDE 1: [Add commenting by Janika Liiv](/commenting)
* GUIDE 2: [Put your app online with Heroku by Terence Lee](/heroku)
